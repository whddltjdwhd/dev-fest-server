/**
 * ÌÜµÌï© ÌÖåÏä§Ìä∏
 * gradeCode Ìï®ÏàòÏùò Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Í≤ÄÏ¶ù
 */

import {MASTER_CONSTRAINTS, MASTER_SCHEDULE} from '../data/masterData.js';
import {formatCodeGradeResult, gradeCode} from '../services/graderService.js';

describe('ÌÜµÌï© ÌÖåÏä§Ìä∏ - ÏΩîÎìú Ïã§Ìñâ Î∞è Ï±ÑÏ†ê', () => {
  test('Ï†ïÎãµ ÏΩîÎìúÎäî ÏÑ±Í≥µÌï¥Ïïº Ìï©ÎãàÎã§', async () => {
    const correctCode = `
      function findWorkableSlots(schedule, constraints) {
        return [
          { day: 'Ïõî', start: '12:15', end: '13:45' },
          { day: 'Ìôî', start: '11:15', end: '12:45' },
          { day: 'Ïàò', start: '12:15', end: '13:45' },
          { day: 'Ïàò', start: '16:15', end: '18:00' },
          { day: 'Î™©', start: '11:15', end: '12:45' },
          { day: 'Í∏à', start: '12:15', end: '14:45' }
        ];
      }
    `;

    const result =
        await gradeCode(correctCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(true);
    expect(result.message).toContain('ÎØ∏ÏÖò ÏÑ±Í≥µ');
  }, 10000);

  test('Ïù¥Îèô ÏãúÍ∞ÑÏùÑ Í≥†Î†§ÌïòÏßÄ ÏïäÏùÄ ÏΩîÎìúÎäî Ïã§Ìå®Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
    const wrongCode = `
      function findWorkableSlots(schedule, constraints) {
        // Ïù¥Îèô ÏãúÍ∞ÑÏùÑ Í≥†Î†§ÌïòÏßÄ ÏïäÏùå
        return [
          { day: 'Ïõî', start: '12:00', end: '14:00' }
        ];
      }
    `;

    const result =
        await gradeCode(wrongCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(false);
    expect(result.failedRule).toBe('RULE_TRAVEL_TIME');
  }, 10000);

  test('ÏµúÏÜå Í∑ºÎ¨¥ ÏãúÍ∞Ñ ÎØ∏Îã¨ ÏΩîÎìúÎäî Ïã§Ìå®Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
    const wrongCode = `
      function findWorkableSlots(schedule, constraints) {
        // 30Î∂ÑÏßúÎ¶¨ ÏãúÍ∞ÑÎåÄ (ÏµúÏÜå 60Î∂Ñ ÎØ∏Îã¨)
        return [
          { day: 'Ìôî', start: '15:15', end: '15:45' }
        ];
      }
    `;

    const result =
        await gradeCode(wrongCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(false);
    expect(result.failedRule).toBe('RULE_MIN_DURATION');
  }, 10000);

  test('Î∂àÏôÑÏ†ÑÌïú ÎãµÏïàÏùÄ Ïã§Ìå®Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
    const incompleteCode = `
      function findWorkableSlots(schedule, constraints) {
        // ÏùºÎ∂ÄÎßå Ï∞æÏùå
        return [
          { day: 'Ïõî', start: '12:15', end: '13:45' }
        ];
      }
    `;

    const result =
        await gradeCode(incompleteCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(false);
    expect(result.failedRule).toBe('RULE_INCOMPLETE');
  }, 10000);

  test('Íµ¨Î¨∏ Ïò§Î•òÍ∞Ä ÏûàÎäî ÏΩîÎìúÎäî Ïã§Ìñâ Ïã§Ìå®Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
    const syntaxErrorCode = `
      function findWorkableSlots(schedule, constraints) {
        return [}; // Íµ¨Î¨∏ Ïò§Î•ò
      }
    `;

    const result =
        await gradeCode(syntaxErrorCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(false);
    expect(result.failedRule).toBe('EXECUTION_ERROR');
  }, 10000);

  test('Î≥¥Ïïà ÏúÑÎ∞ò ÏΩîÎìúÎäî Ïã§Ìñâ Ï†ÑÏóê Ï∞®Îã®ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', async () => {
    const maliciousCode = `
      const fs = require('fs');
      function findWorkableSlots(schedule, constraints) {
        return [];
      }
    `;

    const result =
        await gradeCode(maliciousCode, MASTER_SCHEDULE, MASTER_CONSTRAINTS);
    expect(result.success).toBe(false);
    expect(result.failedRule).toBe('SECURITY_VIOLATION');
  }, 10000);
});

describe('ÌÜµÌï© ÌÖåÏä§Ìä∏ - Í≤∞Í≥º Ìè¨Îß∑ÌåÖ', () => {
  test('ÏÑ±Í≥µ Í≤∞Í≥ºÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Ìè¨Îß∑ÌåÖÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', async () => {
    const correctCode = `
      function findWorkableSlots(schedule, constraints) {
        return [
          { day: 'Ïõî', start: '12:15', end: '13:45' },
          { day: 'Ìôî', start: '11:15', end: '12:45' },
          { day: 'Ïàò', start: '12:15', end: '13:45' },
          { day: 'Ïàò', start: '16:15', end: '18:00' },
          { day: 'Î™©', start: '11:15', end: '12:45' },
          { day: 'Í∏à', start: '12:15', end: '14:45' }
        ];
      }
    `;

    const result = await gradeCode(correctCode);
    const formatted = formatCodeGradeResult(result);

    expect(formatted.status).toBe('success');
    expect(formatted.title).toContain('üéâ');
    expect(formatted.score).toBe(100);
  }, 10000);

  test('Ïã§Ìñâ Ïò§Î•ò Í≤∞Í≥ºÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Ìè¨Îß∑ÌåÖÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', async () => {
    const errorCode = `
      function findWorkableSlots(schedule, constraints) {
        throw new Error('ÏùòÎèÑÏ†Å Ïò§Î•ò');
      }
    `;

    const result = await gradeCode(errorCode);
    const formatted = formatCodeGradeResult(result);

    expect(formatted.status).toBe('failed');
    expect(formatted.title).toContain('‚ö†Ô∏è');
    expect(formatted.score).toBe(0);
  }, 10000);

  test('ÌÖåÏä§Ìä∏ Ïã§Ìå® Í≤∞Í≥ºÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Ìè¨Îß∑ÌåÖÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', async () => {
    const failedCode = `
      function findWorkableSlots(schedule, constraints) {
        return [{ day: 'Ïõî', start: '12:00', end: '14:00' }];
      }
    `;

    const result = await gradeCode(failedCode);
    const formatted = formatCodeGradeResult(result);

    expect(formatted.status).toBe('failed');
    expect(formatted.title).toContain('‚ùå');
    expect(formatted.failedRule).toBeDefined();
  }, 10000);
});
